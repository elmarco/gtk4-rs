initSidebarItems({"constant":[["ACTION_ALL",""],["BUTTON_MIDDLE","The middle button."],["BUTTON_PRIMARY","The primary button. This is typically the left mouse button, or the right button in a left-handed setup."],["BUTTON_SECONDARY","The secondary button. This is typically the right mouse button, or the left button in a left-handed setup."],["CURRENT_TIME",""],["EVENT_PROPAGATE",""],["EVENT_STOP",""],["MODIFIER_MASK",""],["NONE_CONTENT_PROVIDER",""],["NONE_DEVICE_PAD",""],["NONE_DRAG_SURFACE",""],["NONE_DRAW_CONTEXT",""],["NONE_EVENT",""],["NONE_PAINTABLE",""],["NONE_POPUP",""],["NONE_TEXTURE",""],["NONE_TOPLEVEL",""],["PRIORITY_REDRAW",""]],"enum":[["AxisUse","An enumeration describing the way in which a device axis (valuator) maps onto the predefined valuator types that GTK understands."],["CrossingMode","Specifies the crossing mode for enter and leave events."],["DevicePadFeature","A pad feature."],["DeviceToolType","Indicates the specific type of tool being used being a tablet. Such as an airbrush, pencil, etc."],["DragCancelReason","Used in `Drag` to the reason of a cancelled DND operation."],["EventType","Specifies the type of the event."],["FullscreenMode","Indicates which monitor (in a multi-head setup) a surface should span over when in fullscreen mode."],["GLError","Error enumeration for `GLContext`."],["Gravity","Defines the reference point of a surface and is used in `PopupLayout`."],["InputSource","An enumeration describing the type of an input device in general terms."],["KeyMatch","The possible return values from `KeyEvent::matches` describe how well an event matches a given keyval and modifiers."],["MemoryFormat","`MemoryFormat` describes a format that bytes can have in memory."],["NotifyType","Specifies the kind of crossing for enter and leave events."],["ScrollDirection","Specifies the direction for scroll events."],["SubpixelLayout","This enumeration describes how the red, green and blue components of physical pixels on an output device are laid out."],["SurfaceEdge","Determines a surface edge or corner."],["TouchpadGesturePhase","Specifies the current state of a touchpad gesture. All gestures are guaranteed to begin with an event with phase `TouchpadGesturePhase::Begin`, followed by 0 or several events with phase `TouchpadGesturePhase::Update`."],["VulkanError","Error enumeration for `VulkanContext`."]],"fn":[["content_deserialize_async",""],["content_deserialize_async_future",""],["content_register_deserializer",""],["content_register_serializer",""],["content_serialize_async",""],["content_serialize_async_future",""],["intern_mime_type",""],["pango_layout_get_clip_region",""],["pango_layout_line_get_clip_region",""],["pixbuf_get_from_surface",""],["pixbuf_get_from_texture",""],["set_allowed_backends",""],["unicode_to_keyval",""]],"mod":[["functions",""],["keys",""],["prelude","Traits intended for blanket imports."],["subclass",""]],"struct":[["AnchorHints","Positioning hints for aligning a surface relative to a rectangle."],["AppLaunchContext","`AppLaunchContext` is an implementation of `gio::AppLaunchContext` that handles launching an application in a graphical context. It provides startup notification and allows to launch applications on a specific screen or workspace."],["AppLaunchContextBuilder",""],["AxisFlags","Flags describing the current capabilities of a device/tool."],["ButtonEvent",""],["CairoContext","`CairoContext` is an object representing the platform-specific draw context."],["Clipboard","The `Clipboard` object represents a clipboard of data shared between different applications or between different parts of the same application."],["ClipboardBuilder",""],["ContentDeserializer","A `ContentDeserializer` is used to deserialize content received via inter-application data transfers."],["ContentFormats","This section describes the `ContentFormats` structure that is used to advertise and negotiate the format of content passed between different widgets, windows or applications using for example the clipboard or drag’n’drop."],["ContentFormatsBuilder","A `ContentFormatsBuilder` struct is an opaque struct. It is meant to not be kept around and only be used to create new `ContentFormats` objects."],["ContentProvider","A `ContentProvider` is used to provide content for the clipboard in a number of formats."],["ContentSerializer","A `ContentSerializer` is used to serialize content for inter-application data transfers."],["CrossingEvent",""],["Cursor","A `Cursor` represents a cursor. Its contents are private."],["CursorBuilder",""],["DNDEvent",""],["DeleteEvent",""],["Device","The `Device` object represents a single input device, such as a keyboard, a mouse, a touchpad, etc."],["DevicePad","`DevicePad` is an interface implemented by devices of type `InputSource::TabletPad`, it allows querying the features provided by the pad device."],["DeviceTool","A physical tool associated to a `Device`."],["DeviceToolBuilder",""],["Display","`Display` objects are the GDK representation of a workstation."],["DisplayManager","The purpose of the `DisplayManager` singleton object is to offer notification when displays appear or disappear or the default display changes."],["DisplayManagerBuilder",""],["Drag","The `Drag` struct contains only private fields and should not be accessed directly."],["DragAction","Used in `Drop` and `Drag` to indicate the actions that the destination can and should do with the dropped data."],["DragSurface","A `DragSurface` is an interface implemented by `GdkSurfaces` used during a DND operation."],["DrawContext","`DrawContext` is the base object used by contexts implementing different rendering methods, such as `GLContext` or `VulkanContext`. It provides shared functionality between those contexts."],["Drop","The `Drop` struct contains only private fields and should not be accessed directly."],["Event","The `Event` struct contains only private fields and should not be accessed directly."],["EventSequence","`EventSequence` is an opaque type representing a sequence of related touch events."],["FocusEvent",""],["FrameClock","A `FrameClock` tells the application when to update and repaint a surface. This may be synced to the vertical refresh rate of the monitor, for example. Even when the frame clock uses a simple timer rather than a hardware-based vertical sync, the frame clock helps because it ensures everything paints at the same time (reducing the total number of frames). The frame clock can also automatically stop painting when it knows the frames will not be visible, or scale back animation framerates."],["FrameClockPhase","`FrameClockPhase` is used to represent the different paint clock phases that can be requested. The elements of the enumeration correspond to the signals of `FrameClock`."],["FrameTimings","A `FrameTimings` object holds timing information for a single frame of the application’s displays. To retrieve `FrameTimings` objects, use `FrameClock::get_timings` or `FrameClock::get_current_timings`. The information in `FrameTimings` is useful for precise synchronization of video with the event or audio streams, and for measuring quality metrics for the application’s display, such as latency and jitter."],["GLContext","`GLContext` is an object representing the platform-specific OpenGL draw context."],["GLTexture","A `Texture` representing a GL texture object."],["GRange",""],["GrabBrokenEvent",""],["KeyEvent",""],["KeymapKey",""],["MemoryTexture","A `Texture` representing image data in memory."],["ModifierType","A set of bit-flags to indicate the state of modifier keys and mouse buttons in various event types. Typical modifier keys are Shift, Control, Meta, Super, Hyper, Alt, Compose, Apple, CapsLock or ShiftLock."],["Monitor","`Monitor` objects represent the individual outputs that are associated with a `Display`. `Display` keeps a `gio::ListModel` to enumerate and monitor monitors with `Display::get_monitors`. You can use `Display::get_monitor_at_surface` to find a particular monitor."],["MonitorBuilder",""],["MotionEvent",""],["PadEvent",""],["Paintable","`Paintable` is a simple interface used by GDK and GTK to represent objects that can be painted anywhere at any size without requiring any sort of layout. The interface is inspired by similar concepts elsewhere, such as ClutterContent, HTML/CSS Paint Sources, or SVG Paint Servers."],["PaintableFlags","Flags about this object. Implementations use these for optimizations such as caching."],["Popup","A `Popup` is a surface that is attached to another surface, called its `Popup:parent`, and is positioned relative to it."],["PopupLayout","Popups are positioned relative to their parent surface. The `PopupLayout` struct contains information that is necessary to do so."],["ProximityEvent",""],["RGBA","A `RGBA` is used to represent a (possibly translucent) color, in a way that is compatible with cairo’s notion of color."],["Rectangle","Defines the position and size of a rectangle. It is identical to `cairo::RectangleInt`."],["RgbaParseError",""],["ScrollEvent",""],["Seat","The `Seat` object represents a collection of input devices that belong to a user."],["SeatCapabilities","Flags describing the seat capabilities."],["Snapshot","Base type for snapshot operations."],["Surface","A `Surface` is a (usually) rectangular region on the screen. It’s a low-level object, used to implement high-level objects such as `GtkWindow` or `GtkDialog` in GTK."],["Texture","The `GdkTexture` structure contains only private data."],["TimeCoord",""],["Toplevel","A `Toplevel` is a freestanding toplevel surface."],["ToplevelLayout","Toplevel surfaces are sovereign windows that can be presented to the user in various states (maximized, on all workspaces, etc)."],["ToplevelSize",""],["ToplevelState","Specifies the state of a toplevel surface."],["TouchEvent",""],["TouchpadEvent",""],["VulkanContext","`VulkanContext` is an object representing the platform-specific Vulkan draw context."]],"trait":[["ContentProviderExt","Trait containing all `ContentProvider` methods."],["DevicePadExt","Trait containing all `DevicePad` methods."],["DragSurfaceExt","Trait containing all `DragSurface` methods."],["DrawContextExt","Trait containing all `DrawContext` methods."],["EventKind",""],["PaintableExt","Trait containing all `Paintable` methods."],["PopupExt","Trait containing all `Popup` methods."],["PopupLayoutExtManual",""],["SurfaceExtManual",""],["TextureExt","Trait containing all `Texture` methods."],["ToplevelExt","Trait containing all `Toplevel` methods."]],"type":[["Atom",""]]});