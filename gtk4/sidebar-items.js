initSidebarItems({"constant":[["ACCESSIBLE_VALUE_UNDEFINED",""],["NONE_ACCESSIBLE",""],["NONE_ACTIONABLE",""],["NONE_ADJUSTMENT",""],["NONE_APPLICATION",""],["NONE_APPLICATION_WINDOW",""],["NONE_APP_CHOOSER",""],["NONE_BOX",""],["NONE_BUILDABLE",""],["NONE_BUILDER_SCOPE",""],["NONE_BUTTON",""],["NONE_CELL_AREA",""],["NONE_CELL_AREA_CONTEXT",""],["NONE_CELL_EDITABLE",""],["NONE_CELL_LAYOUT",""],["NONE_CELL_RENDERER",""],["NONE_CELL_RENDERER_TEXT",""],["NONE_CHECK_BUTTON",""],["NONE_COLOR_CHOOSER",""],["NONE_COMBO_BOX",""],["NONE_CONSTRAINT_TARGET",""],["NONE_DIALOG",""],["NONE_DRAWING_AREA",""],["NONE_EDITABLE",""],["NONE_ENTRY",""],["NONE_ENTRY_BUFFER",""],["NONE_EVENT_CONTROLLER",""],["NONE_EXPRESSION",""],["NONE_FILE_CHOOSER",""],["NONE_FILTER",""],["NONE_FIXED",""],["NONE_FLOW_BOX_CHILD",""],["NONE_FONT_CHOOSER",""],["NONE_FRAME",""],["NONE_GESTURE",""],["NONE_GESTURE_DRAG",""],["NONE_GESTURE_SINGLE",""],["NONE_GL_AREA",""],["NONE_GRID",""],["NONE_IM_CONTEXT",""],["NONE_IM_CONTEXT_SIMPLE",""],["NONE_IM_MULTICONTEXT",""],["NONE_LAYOUT_CHILD",""],["NONE_LAYOUT_MANAGER",""],["NONE_LIST_BASE",""],["NONE_LIST_BOX_ROW",""],["NONE_LIST_ITEM_FACTORY",""],["NONE_LIST_STORE",""],["NONE_MEDIA_FILE",""],["NONE_MEDIA_STREAM",""],["NONE_MOUNT_OPERATION",""],["NONE_MULTI_FILTER",""],["NONE_NATIVE",""],["NONE_NATIVE_DIALOG",""],["NONE_ORIENTABLE",""],["NONE_POPOVER",""],["NONE_PRINT_OPERATION",""],["NONE_PRINT_OPERATION_PREVIEW",""],["NONE_RANGE",""],["NONE_RECENT_MANAGER",""],["NONE_ROOT",""],["NONE_SCALE",""],["NONE_SCALE_BUTTON",""],["NONE_SCROLLABLE",""],["NONE_SELECTION_MODEL",""],["NONE_SHORTCUT_ACTION",""],["NONE_SHORTCUT_MANAGER",""],["NONE_SHORTCUT_TRIGGER",""],["NONE_SORTER",""],["NONE_STYLE_CONTEXT",""],["NONE_STYLE_PROVIDER",""],["NONE_TEXT_BUFFER",""],["NONE_TEXT_CHILD_ANCHOR",""],["NONE_TEXT_MARK",""],["NONE_TEXT_TAG",""],["NONE_TEXT_VIEW",""],["NONE_TOGGLE_BUTTON",""],["NONE_TREE_DRAG_DEST",""],["NONE_TREE_DRAG_SOURCE",""],["NONE_TREE_MODEL",""],["NONE_TREE_MODEL_FILTER",""],["NONE_TREE_MODEL_SORT",""],["NONE_TREE_SORTABLE",""],["NONE_TREE_STORE",""],["NONE_TREE_VIEW",""],["NONE_WIDGET",""],["NONE_WINDOW",""],["NONE_WINDOW_GROUP",""],["PRIORITY_RESIZE",""],["STYLE_PROVIDER_PRIORITY_APPLICATION",""],["STYLE_PROVIDER_PRIORITY_FALLBACK",""],["STYLE_PROVIDER_PRIORITY_SETTINGS",""],["STYLE_PROVIDER_PRIORITY_THEME",""],["STYLE_PROVIDER_PRIORITY_USER",""],["TEXT_VIEW_PRIORITY_VALIDATE",""]],"enum":[["AccessibleAutocomplete","The possible values for the `AccessibleProperty::Autocomplete` accessible property."],["AccessibleInvalidState","The possible values for the `AccessibleState::Invalid` accessible state."],["AccessibleProperty","The possible accessible properties of a `Accessible`."],["AccessibleRelation","The possible accessible relations of a `Accessible`. Accessible relations can be references to other widgets, integers or strings."],["AccessibleRole","The accessible role for a `Accessible` implementation."],["AccessibleSort","The possible values for the `AccessibleProperty::Sort` accessible property."],["AccessibleState","The possible accessible states of a `Accessible`."],["AccessibleTristate","The possible values for the `AccessibleState::Pressed` accessible state."],["Align","Controls how a widget deals with extra space in a single (x or y) dimension."],["ArrowType","Used to indicate the direction in which an arrow should point."],["AssistantPageType","An enum for determining the page role inside the `Assistant`. It’s used to handle buttons sensitivity and visibility."],["BaselinePosition","Whenever a container has some form of natural row it may align children in that row along a common typographical baseline. If the amount of vertical space in the row is taller than the total requested height of the baseline-aligned children then it can use a `BaselinePosition` to select where to put the baseline inside the extra available space."],["BorderStyle","Describes how the border of a UI element should be rendered."],["BuilderError","Error codes that identify various errors that can occur while using `Builder`."],["ButtonsType","Prebuilt sets of buttons for the dialog. If none of these choices are appropriate, simply use `ButtonsType::None` then call `Dialog::add_buttons`."],["CellRendererAccelMode","Determines if the edited accelerators are GTK accelerators. If they are, consumed modifiers are suppressed, only accelerators accepted by GTK are allowed, and the accelerators are rendered in the same way as they are in menus."],["CellRendererMode","Identifies how the user can interact with a particular cell."],["ConstraintAttribute","The widget attributes that can be used when creating a `Constraint`."],["ConstraintRelation","The relation between two terms of a constraint."],["ConstraintStrength","The strength of a constraint, expressed as a symbolic constant."],["ConstraintVflParserError","Domain for VFL parsing errors."],["CornerType","Specifies which corner a child widget should be placed in when packed into a `ScrolledWindow`. This is effectively the opposite of where the scroll bars are placed."],["CssParserError","Errors that can occur while parsing CSS."],["CssParserWarning","Warnings that can occur while parsing CSS."],["DeleteType","See also: `Entry::delete-from-cursor`."],["DirectionType","Focus movement types."],["EditableProperties",""],["EntryIconPosition","Specifies the side of the entry at which an icon is placed."],["EventSequenceState","Describes the state of a `gdk::EventSequence` in a `Gesture`."],["FileChooserAction","Describes whether a `FileChooser` is being used to open existing files or to save to a possibly new file."],["FileChooserError","These identify the various errors that can occur while calling `FileChooser` functions."],["FilterChange","Describes changes in a filter in more detail and allows objects using the filter to optimize refiltering items."],["FilterMatch","Describes the known strictness of a filter."],["IconSize","Built-in icon sizes."],["IconThemeError","Error codes for `IconTheme` operations."],["IconViewDropPosition","An enum for determining where a dropped item goes."],["ImageType","Describes the image data representation used by a `Image`. If you want to get the image from the widget, you can only get the currently-stored representation. e.g. if the `Image::get_storage_type` returns `ImageType::Paintable`, then you can call `Image::get_paintable`. For empty images, you can request any storage type (call any of the “get” functions), but they will all return `None` values."],["InputPurpose","Describes primary purpose of the input widget. This information is useful for on-screen keyboards and similar input methods to decide which keys should be presented to the user."],["Justification","Used for justifying the text inside a `Label` widget."],["LevelBarMode","Describes how `LevelBar` contents should be rendered. Note that this enumeration could be extended with additional modes in the future."],["License","The type of license for an application."],["MessageType","The type of message being displayed in the dialog."],["MovementStep",""],["NotebookTab","The parameter used in the action signals of `Notebook`."],["NumberUpLayout","Used to determine the layout of pages on a sheet when printing multiple pages per sheet."],["Ordering","Describes the way two values can be compared."],["Orientation","Represents the orientation of widgets and other objects which can be switched between horizontal and vertical orientation on the fly, like `Box` or `GesturePan`."],["Overflow","Defines how content overflowing a given area should be handled, such as with `WidgetExt::set_overflow`. This property is modeled after the CSS overflow property, but implements it only partially."],["PackType","Represents the packing location of a children in its parent. See `WindowControls` for example."],["PadActionType","The type of a pad action."],["PageOrientation","See also `PrintSettings::set_orientation`."],["PageSet","See also `gtk_print_job_set_page_set`."],["PanDirection","Describes the panning direction of a `GesturePan`"],["PolicyType","Determines how the size should be computed to achieve the one of the visibility mode for the scrollbars."],["PositionType","Describes which edge of a widget a certain feature is positioned at, e.g. the tabs of a `Notebook`, or the label of a `Scale`."],["PrintDuplex","See also `PrintSettings::set_duplex`."],["PrintError","Error codes that identify various errors that can occur while using the GTK printing support."],["PrintOperationAction","The `action` parameter to `PrintOperationExt::run` determines what action the print operation should perform."],["PrintOperationResult","A value of this type is returned by `PrintOperationExt::run`."],["PrintPages","See also `gtk_print_job_set_pages`"],["PrintQuality","See also `PrintSettings::set_quality`."],["PrintStatus","The status gives a rough indication of the completion of a running print operation."],["PropagationLimit","Describes limits of a `EventController` for handling events targeting other widgets."],["PropagationPhase","Describes the stage at which events are fed into a `EventController`."],["RecentManagerError","Error codes for `RecentManager` operations"],["ResponseType","Predefined values for use as response ids in `DialogExt::add_button`. All predefined values are negative; GTK leaves values of 0 or greater for application-defined response ids."],["RevealerTransitionType","These enumeration values describe the possible transitions when the child of a `Revealer` widget is shown or hidden."],["ScrollStep",""],["ScrollType","Scrolling types."],["ScrollablePolicy","Defines the policy to be used in a scrollable widget when updating the scrolled window adjustments in a given orientation."],["SelectionMode","Used to control what selections users are allowed to make."],["SensitivityType","Determines how GTK handles the sensitivity of various controls, such as combo box buttons."],["ShortcutScope","Describes where `GtkShortcuts` added to a `ShortcutController` get handled."],["ShortcutType","`ShortcutType` specifies the kind of shortcut that is being described. More values may be added to this enumeration over time."],["SizeGroupMode","The mode of the size group determines the directions in which the size group affects the requested sizes of its component widgets."],["SizeRequestMode","Specifies a preference for height-for-width or width-for-height geometry management."],["SortColumn",""],["SortType","Determines the direction of a sort."],["SorterChange","Describes changes in a sorter in more detail and allows users to optimize resorting."],["SorterOrder","Describes the type of order that a `Sorter` may describe."],["SpinButtonUpdatePolicy","The spin button update policy determines whether the spin button displays values even if they are outside the bounds of its adjustment. See `SpinButton::set_update_policy`."],["SpinType","The values of the `SpinType` enumeration are used to specify the change to make in `SpinButton::spin`."],["StackTransitionType","These enumeration values describe the possible transitions between pages in a `Stack` widget."],["StringFilterMatchMode","Specifies how search strings are matched inside text."],["SystemSetting","Values that can be passed to the `WidgetClass`.system_setting_changed vfunc to indicate that a system setting has changed and widgets may need to drop caches, or react otherwise."],["TextDirection","Reading directions for text."],["TextExtendSelection","Granularity types that extend the text selection. Use the `TextView::extend-selection` signal to customize the selection."],["TextViewLayer","Used to reference the layers of `TextView` for the purpose of customized drawing with the ::snapshot_layer vfunc."],["TextWindowType","Used to reference the parts of `TextView`."],["TreeViewColumnSizing","The sizing method the column uses to determine its width. Please note that `TreeViewColumnSizing::Autosize` are inefficient for large views, and can make columns appear choppy."],["TreeViewDropPosition","An enum for determining where a dropped row goes."],["TreeViewGridLines","Used to indicate which grid lines to draw in a tree view."],["Unit","See also `PrintSettings::set_paper_width`."],["WrapMode","Describes a type of line wrapping."]],"fn":[["accelerator_get_default_mod_mask",""],["accelerator_get_label",""],["accelerator_get_label_with_keycode",""],["accelerator_name",""],["accelerator_name_with_keycode",""],["accelerator_parse",""],["accelerator_valid",""],["check_version",""],["css_parser_warning_quark",""],["disable_setlocale",""],["enumerate_printers",""],["get_binary_age",""],["get_debug_flags",""],["get_default_language",""],["get_interface_age",""],["get_locale_direction",""],["get_major_version",""],["get_micro_version",""],["get_minor_version",""],["hsv_to_rgb",""],["init","Tries to initialize GTK+."],["is_initialized","Returns `true` if GTK has been initialized."],["is_initialized_main_thread","Returns `true` if GTK has been initialized and this is the main thread."],["print_run_page_setup_dialog",""],["print_run_page_setup_dialog_async",""],["render_activity",""],["render_arrow",""],["render_background",""],["render_check",""],["render_expander",""],["render_focus",""],["render_frame",""],["render_handle",""],["render_icon",""],["render_layout",""],["render_line",""],["render_option",""],["rgb_to_hsv",""],["set_debug_flags",""],["set_initialized","Informs this crate that GTK has been initialized and the current thread is the main one."],["show_about_dialog",""],["show_uri",""],["test_accessible_assertion_message_role",""],["test_accessible_has_property",""],["test_accessible_has_relation",""],["test_accessible_has_role",""],["test_accessible_has_state",""],["test_register_all_types",""],["test_widget_wait_for_draw",""],["tree_create_row_drag_content",""],["tree_get_row_drag_data",""]],"mod":[["functions",""],["prelude","Traits intended for blanket imports."],["subclass",""]],"static":[["IM_MODULE_EXTENSION_POINT_NAME",""],["LEVEL_BAR_OFFSET_FULL",""],["LEVEL_BAR_OFFSET_HIGH",""],["LEVEL_BAR_OFFSET_LOW",""],["MEDIA_FILE_EXTENSION_POINT_NAME",""],["PAPER_NAME_A3",""],["PAPER_NAME_A4",""],["PAPER_NAME_A5",""],["PAPER_NAME_B5",""],["PAPER_NAME_EXECUTIVE",""],["PAPER_NAME_LEGAL",""],["PAPER_NAME_LETTER",""],["PRINT_SETTINGS_COLLATE",""],["PRINT_SETTINGS_DEFAULT_SOURCE",""],["PRINT_SETTINGS_DITHER",""],["PRINT_SETTINGS_DUPLEX",""],["PRINT_SETTINGS_FINISHINGS",""],["PRINT_SETTINGS_MEDIA_TYPE",""],["PRINT_SETTINGS_NUMBER_UP",""],["PRINT_SETTINGS_NUMBER_UP_LAYOUT",""],["PRINT_SETTINGS_N_COPIES",""],["PRINT_SETTINGS_ORIENTATION",""],["PRINT_SETTINGS_OUTPUT_BASENAME",""],["PRINT_SETTINGS_OUTPUT_BIN",""],["PRINT_SETTINGS_OUTPUT_DIR",""],["PRINT_SETTINGS_OUTPUT_FILE_FORMAT",""],["PRINT_SETTINGS_OUTPUT_URI",""],["PRINT_SETTINGS_PAGE_RANGES",""],["PRINT_SETTINGS_PAGE_SET",""],["PRINT_SETTINGS_PAPER_FORMAT",""],["PRINT_SETTINGS_PAPER_HEIGHT",""],["PRINT_SETTINGS_PAPER_WIDTH",""],["PRINT_SETTINGS_PRINTER",""],["PRINT_SETTINGS_PRINTER_LPI",""],["PRINT_SETTINGS_PRINT_PAGES",""],["PRINT_SETTINGS_QUALITY",""],["PRINT_SETTINGS_RESOLUTION",""],["PRINT_SETTINGS_RESOLUTION_X",""],["PRINT_SETTINGS_RESOLUTION_Y",""],["PRINT_SETTINGS_REVERSE",""],["PRINT_SETTINGS_SCALE",""],["PRINT_SETTINGS_USE_COLOR",""],["PRINT_SETTINGS_WIN32_DRIVER_EXTRA",""],["PRINT_SETTINGS_WIN32_DRIVER_VERSION",""]],"struct":[["ATContext","`ATContext` is an abstract class provided by GTK to communicate to platform-specific assistive technologies API."],["AboutDialog","The `AboutDialog` offers a simple way to display information about a program like its logo, name, copyright, website and license. It is also possible to give credits to the authors, documenters, translators and artists who have worked on the program. An about dialog is typically opened when the user selects the `About` option from the `Help` menu. All parts of the dialog are optional."],["AboutDialogBuilder",""],["Accessible","`Accessible` provides an interface for describing a UI element, like a `Widget`, in a way that can be consumed by Assistive Technologies, or “AT”. Every accessible implementation has:"],["ActionBar","`ActionBar` is designed to present contextual actions. It is expected to be displayed below the content and expand horizontally to fill the area."],["ActionBarBuilder",""],["Actionable","This interface provides a convenient way of associating widgets with actions on a `ApplicationWindow` or `Application`."],["ActivateAction","A `ShortcutAction` that calls `WidgetExt::activate`."],["Adjustment","The `Adjustment` object represents a value which has an associated lower and upper bound, together with step and page increments, and a page size. It is used within several GTK+ widgets, including `SpinButton`, `Viewport`, and `Range` (which is a base class for `Scrollbar` and `Scale`)."],["AdjustmentBuilder",""],["AlternativeTrigger","A `ShortcutTrigger` that triggers when either of two `GtkShortcutTriggers` trigger."],["AlternativeTriggerBuilder",""],["AnyFilter","Implements"],["AppChooser","`AppChooser` is an interface that can be implemented by widgets which allow the user to choose an application (typically for the purpose of opening a file). The main objects that implement this interface are `AppChooserWidget`, `AppChooserDialog` and `AppChooserButton`."],["AppChooserButton","The `AppChooserButton` is a widget that lets the user select an application. It implements the `AppChooser` interface."],["AppChooserButtonBuilder",""],["AppChooserDialog","`AppChooserDialog` shows a `AppChooserWidget` inside a `Dialog`."],["AppChooserDialogBuilder",""],["AppChooserWidget","`AppChooserWidget` is a widget for selecting applications. It is the main building block for `AppChooserDialog`. Most applications only need to use the latter; but you can use this widget as part of a larger widget if you have special needs."],["AppChooserWidgetBuilder",""],["Application","`Application` is a class that handles many important aspects of a GTK+ application in a convenient fashion, without enforcing a one-size-fits-all application model."],["ApplicationBuilder",""],["ApplicationInhibitFlags","Types of user actions that may be blocked by `GtkApplicationExt::inhibit`."],["ApplicationWindow","`ApplicationWindow` is a `Window` subclass that offers some extra functionality for better integration with `Application` features. Notably, it can handle an application menubar. See `GtkApplicationExt::set_menubar`."],["ApplicationWindowBuilder",""],["AspectFrame","The `AspectFrame` is useful when you want pack a widget so that it can resize but always retains the same aspect ratio. For instance, one might be drawing a small preview of a larger image. `AspectFrame` derives from `Frame`, so it can draw a label and a frame around the child. The frame will be “shrink-wrapped” to the size of the child."],["AspectFrameBuilder",""],["Assistant","A `Assistant` is a widget used to represent a generally complex operation split up into several steps. Each step consists of one or more pages. `Assistant` guides the user through the pages, and controls the page flow to collect the data needed for the operation."],["AssistantBuilder",""],["AssistantPage","Implements"],["AssistantPageBuilder",""],["BinLayout","`BinLayout` is a `LayoutManager` subclass useful for create “bins” of widgets. `BinLayout` will stack each child of a widget on top of each other, using the `Widget:hexpand`, `Widget:vexpand`, `Widget:halign`, and `Widget:valign` properties of each child to determine where they should be positioned."],["Bitset","`Bitset` is a data structure for representing a set of unsigned integers. Another name for this data structure is “bitmap”."],["BookmarkList","`BookmarkList` is a list model that wraps GBookmarkFile. It presents a `gio::ListModel` and fills it asynchronously with the `GFileInfos` returned from that function."],["BookmarkListBuilder",""],["BoolFilter","`BoolFilter` is a simple filter that takes a boolean `Expression` to determine whether to include items."],["BoolFilterBuilder",""],["Border","A struct that specifies a border around a rectangular area that can be of different width on each side."],["Box","The `Box` widget arranges child widgets into a single row or column, depending upon the value of its `Orientable:orientation` property. Within the other dimension, all children are allocated the same size. Of course, the `Widget:halign` and `Widget:valign` properties can be used on the children to influence their allocation."],["BoxBuilder",""],["BoxLayout","A `BoxLayout` is a layout manager that arranges the children of any widget using it into a single row or column, depending on the value of its `Orientable:orientation` property. Within the other dimension all children all allocated the same size. The `BoxLayout` will respect the `Widget:halign` and `Widget:valign` properties of each child widget."],["BoxLayoutBuilder",""],["Buildable","`Buildable` allows objects to extend and customize their deserialization from [`Builder` UI descriptions][BUILDER-UI]. The interface includes methods for setting names and properties of objects, parsing custom tags and constructing child objects."],["Builder","A `Builder` is an auxiliary object that reads textual descriptions of a user interface and instantiates the described objects. To create a `Builder` from a user interface description, call `Builder::new_from_file`, `Builder::new_from_resource` or `Builder::new_from_string`."],["BuilderBuilder",""],["BuilderClosureFlags","The list of flags that can be passed to `Builder::create_closure`. New values may be added in the future for new features, so external implementations of `BuilderScopeInterface` should test the flags for unknown values and raise a `BuilderError::InvalidAttribute` error when they encounter one."],["BuilderListItemFactory","`BuilderListItemFactory` is a `ListItemFactory` that creates widgets by instantiating `Builder` UI templates. The templates must be extending `ListItem`, and typically use `GtkExpressions` to obtain data from the items in the model."],["BuilderListItemFactoryBuilder",""],["BuilderScope","`BuilderScope` is an interface to provide support to `Builder`, primarily for looking up programming-language-specific values for strings that are given in a `Builder` UI file."],["Button","The `Button` widget is generally used to trigger a callback function that is called when the button is pressed. The various signals and how to use them are outlined below."],["ButtonBuilder",""],["Calendar","`Calendar` is a widget that displays a Gregorian calendar, one month at a time. It can be created with `Calendar::new`."],["CalendarBuilder",""],["CallbackAction","A `ShortcutAction` that invokes a callback."],["CellArea","The `CellArea` is an abstract class for `CellLayout` widgets (also referred to as “layouting widgets”) to interface with an arbitrary number of `GtkCellRenderers` and interact with the user for a given `TreeModel` row."],["CellAreaBox","The `CellAreaBox` renders cell renderers into a row or a column depending on its `Orientation`."],["CellAreaBoxBuilder",""],["CellAreaContext","The `CellAreaContext` object is created by a given `CellArea` implementation via its `CellAreaClass.create_context`() virtual method and is used to store cell sizes and alignments for a series of `TreeModel` rows that are requested and rendered in the same context."],["CellAreaContextBuilder",""],["CellEditable","The `CellEditable` interface must be implemented for widgets to be usable to edit the contents of a `TreeView` cell. It provides a way to specify how temporary widgets should be configured for editing, get the new value, etc."],["CellLayout","`CellLayout` is an interface to be implemented by all objects which want to provide a `TreeViewColumn` like API for packing cells, setting attributes and data funcs."],["CellRenderer","The `CellRenderer` is a base class of a set of objects used for rendering a cell to a `cairo::Context`. These objects are used primarily by the `TreeView` widget, though they aren’t tied to them in any specific way. It is worth noting that `CellRenderer` is not a `Widget` and cannot be treated as such."],["CellRendererAccel","`CellRendererAccel` displays a keyboard accelerator (i.e. a key combination like `Control + a`). If the cell renderer is editable, the accelerator can be changed by simply typing the new combination."],["CellRendererAccelBuilder",""],["CellRendererCombo","`CellRendererCombo` renders text in a cell like `CellRendererText` from which it is derived. But while `CellRendererText` offers a simple entry to edit the text, `CellRendererCombo` offers a `ComboBox` widget to edit the text. The values to display in the combo box are taken from the tree model specified in the `CellRendererCombo:model` property."],["CellRendererComboBuilder",""],["CellRendererPixbuf","A `CellRendererPixbuf` can be used to render an image in a cell. It allows to render either a given `gdk_pixbuf::Pixbuf` (set via the `CellRendererPixbuf:pixbuf` property) or a named icon (set via the `CellRendererPixbuf:icon-name` property)."],["CellRendererPixbufBuilder",""],["CellRendererProgress","`CellRendererProgress` renders a numeric value as a progress par in a cell. Additionally, it can display a text on top of the progress bar."],["CellRendererProgressBuilder",""],["CellRendererSpin","`CellRendererSpin` renders text in a cell like `CellRendererText` from which it is derived. But while `CellRendererText` offers a simple entry to edit the text, `CellRendererSpin` offers a `SpinButton` widget. Of course, that means that the text has to be parseable as a floating point number."],["CellRendererSpinBuilder",""],["CellRendererSpinner","`CellRendererSpinner` renders a spinning animation in a cell, very similar to `Spinner`. It can often be used as an alternative to a `CellRendererProgress` for displaying indefinite activity, instead of actual progress."],["CellRendererSpinnerBuilder",""],["CellRendererState","Tells how a cell is to be rendered."],["CellRendererText","A `CellRendererText` renders a given text in its cell, using the font, color and style information provided by its properties. The text will be ellipsized if it is too long and the `CellRendererText:ellipsize` property allows it."],["CellRendererTextBuilder",""],["CellRendererToggle","`CellRendererToggle` renders a toggle button in a cell. The button is drawn as a radio or a checkbutton, depending on the `CellRendererToggle:radio` property. When activated, it emits the `CellRendererToggle::toggled` signal."],["CellRendererToggleBuilder",""],["CellView","A `CellView` displays a single row of a `TreeModel` using a `CellArea` and `CellAreaContext`. A `CellAreaContext` can be provided to the `CellView` at construction time in order to keep the cellview in context of a group of cell views, this ensures that the renderers displayed will be properly aligned with each other (like the aligned cells in the menus of `ComboBox`)."],["CellViewBuilder",""],["CenterBox","The `CenterBox` widget arranges three children in a horizontal or vertical arrangement, keeping the middle child centered as well as possible."],["CenterBoxBuilder",""],["CenterLayout","A `CenterLayout` is a layout manager that manages up to three children. The start widget is allocated at the start of the layout (left in LRT layouts and right in RTL ones), and the end widget at the end."],["CheckButton","A `CheckButton` places a label next to an indicator."],["CheckButtonBuilder",""],["ClosureExpression",""],["ColorButton","The `ColorButton` is a button which displays the currently selected color and allows to open a color selection dialog to change the color. It is suitable widget for selecting a color in a preference dialog."],["ColorButtonBuilder",""],["ColorChooser","`ColorChooser` is an interface that is implemented by widgets for choosing colors. Depending on the situation, colors may be allowed to have alpha (translucency)."],["ColorChooserDialog","The `ColorChooserDialog` widget is a dialog for choosing a color. It implements the `ColorChooser` interface."],["ColorChooserDialogBuilder",""],["ColorChooserWidget","The `ColorChooserWidget` widget lets the user select a color. By default, the chooser presents a predefined palette of colors, plus a small number of settable custom colors. It is also possible to select a different color with the single-color editor. To enter the single-color editing mode, use the context menu of any color of the palette, or use the ‘+’ button to add a new custom color."],["ColorChooserWidgetBuilder",""],["ColumnView","`ColumnView` is a widget to present a view into a large dynamic list of items using multiple columns with headers."],["ColumnViewBuilder",""],["ColumnViewColumn","`ColumnViewColumn` represents the columns being added to `ColumnView`."],["ColumnViewColumnBuilder",""],["ComboBox","A `ComboBox` is a widget that allows the user to choose from a list of valid choices. The `ComboBox` displays the selected choice. When activated, the `ComboBox` displays a popup which allows the user to make a new choice. The style in which the selected value is displayed, and the style of the popup is determined by the current theme. It may be similar to a Windows-style combo box."],["ComboBoxBuilder",""],["ComboBoxText","A `ComboBoxText` is a simple variant of `ComboBox` that hides the model-view complexity for simple text-only use cases."],["ComboBoxTextBuilder",""],["ConstantExpression",""],["Constraint","`Constraint` describes a constraint between an attribute on a widget and another attribute on another widget, expressed as a linear equation like:"],["ConstraintBuilder",""],["ConstraintGuide","A `ConstraintGuide` is an invisible layout element that can be used by widgets inside a `ConstraintLayout` as a source or a target of a `Constraint`. Guides can be used like guidelines or as flexible space."],["ConstraintGuideBuilder",""],["ConstraintLayout","`ConstraintLayout` is a layout manager that uses relations between widget attributes, expressed via `Constraint` instances, to measure and allocate widgets."],["ConstraintLayoutChild","A `LayoutChild` in a `ConstraintLayout`."],["ConstraintLayoutChildBuilder",""],["ConstraintTarget","The `ConstraintTarget` interface is implemented by objects that can be used as source or target in `GtkConstraints`. Besides `Widget`, it is also implemented by `ConstraintGuide`."],["CssLocation",""],["CssProvider","`CssProvider` is an object implementing the `StyleProvider` interface. It is able to parse [CSS-like][css-overview] input in order to style widgets."],["CssSection","Defines a part of a CSS document. Because sections are nested into one another, you can use `CssSection::get_parent` to get the containing region."],["CustomFilter","`CustomFilter` is a `Filter` that uses a callback to determine whether to include an item or not."],["CustomSorter","`CustomSorter` is a `Sorter` implementation that sorts via a traditional `GCompareDataFunc` callback."],["DebugFlags",""],["Dialog","Dialog boxes are a convenient way to prompt the user for a small amount of input, e.g. to display a message, ask a question, or anything else that does not require extensive effort on the user’s part."],["DialogBuilder",""],["DialogFlags","Flags used to influence dialog construction."],["DirectoryList","`DirectoryList` is a list model that wraps `gio::File::enumerate_children_async`. It presents a `gio::ListModel` and fills it asynchronously with the `GFileInfos` returned from that function."],["DirectoryListBuilder",""],["DragIcon","`DragIcon` is a `Root` implementation with the sole purpose to serve as a drag icon during DND operations. A drag icon moves with the pointer during a drag operation and is destroyed when the drag ends."],["DragIconBuilder",""],["DragSource","`DragSource` is an auxiliary object that is used to initiate Drag-And-Drop operations. It can be set up with the necessary ingredients for a DND operation ahead of time. This includes the source for the data that is being transferred, in the form of a `gdk::ContentProvider`, the desired action, and the icon to use during the drag operation. After setting it up, the drag source must be added to a widget as an event controller, using `WidgetExt::add_controller`."],["DragSourceBuilder",""],["DrawingArea","The `DrawingArea` widget is used for creating custom user interface elements. It’s essentially a blank widget; you can draw on it. After creating a drawing area, the application may want to connect to:"],["DrawingAreaBuilder",""],["DropControllerMotion","`DropControllerMotion` is an event controller meant for tracking the pointer hovering over a widget during a drag and drop operation."],["DropControllerMotionBuilder",""],["DropDown","`DropDown` is a widget that allows the user to choose an item from a list of options. The `DropDown` displays the selected choice."],["DropDownBuilder",""],["DropTarget","`DropTarget` is an event controller implementing a simple way to receive Drag-and-Drop operations."],["DropTargetAsync","`DropTargetAsync` is an auxiliary object that can be used to receive Drag-and-Drop operations. It is the more complete but also more complex method of handling drop operations compared to `DropTarget` and you should only use it if `DropTarget` doesn’t provide all the features you need."],["DropTargetAsyncBuilder",""],["DropTargetBuilder",""],["Editable","The `Editable` interface is an interface which should be implemented by text editing widgets, such as `Entry` and `SpinButton`. It contains functions for generically manipulating an editable widget, a large number of action signals used for key bindings, and several signals that an application can connect to modify the behavior of a widget."],["EditableLabel","A `EditableLabel` is a `Label` that allows users to edit the text by switching the widget to an “edit mode”."],["EditableLabelBuilder",""],["EmojiChooser","The `EmojiChooser` popover is used by text widgets such as `Entry` or `TextView` to offer users a convenient way to insert Emoji characters."],["EmojiChooserBuilder",""],["Entry","The `Entry` widget is a single line text entry widget. A fairly large set of key bindings are supported by default. If the entered text is longer than the allocation of the widget, the widget will scroll so that the cursor position is visible."],["EntryBuffer","The `EntryBuffer` class contains the actual text displayed in a `Entry` widget."],["EntryBufferBuilder",""],["EntryBuilder",""],["EntryCompletion","`EntryCompletion` is an auxiliary object to be used in conjunction with `Entry` to provide the completion functionality. It implements the `CellLayout` interface, to allow the user to add extra cells to the `TreeView` with completion matches."],["EntryCompletionBuilder",""],["EventController","`EventController` is a base, low-level implementation for event controllers. Those react to a series of `GdkEvents`, and possibly trigger actions as a consequence of those."],["EventControllerFocus","`EventControllerFocus` is an event controller meant for situations where you need to know where the focus is."],["EventControllerFocusBuilder",""],["EventControllerKey","`EventControllerKey` is an event controller meant for situations where you need access to key events."],["EventControllerKeyBuilder",""],["EventControllerLegacy","`EventControllerLegacy` is an event controller that gives you direct access to the event stream. It should only be used as a last resort if none of the other event controllers or gestures do the job."],["EventControllerLegacyBuilder",""],["EventControllerMotion","`EventControllerMotion` is an event controller meant for situations where you need to track the position of the pointer."],["EventControllerMotionBuilder",""],["EventControllerScroll","`EventControllerScroll` is an event controller meant to handle scroll events from mice and touchpads. It is capable of handling both discrete and continuous scroll events, abstracting them both on the `EventControllerScroll::scroll` signal (deltas in the discrete case are multiples of 1)."],["EventControllerScrollBuilder",""],["EventControllerScrollFlags","Describes the behavior of a `EventControllerScroll`."],["EveryFilter","Implements"],["Expander","A `Expander` allows the user to hide or show its child by clicking on an expander triangle similar to the triangles used in a `TreeView`."],["ExpanderBuilder",""],["Expression",""],["ExpressionWatch",""],["FileChooser","`FileChooser` is an interface that can be implemented by file selection widgets. In GTK, the main objects that implement this interface are `FileChooserWidget` and `FileChooserDialog`. You do not need to write an object that implements the `FileChooser` interface unless you are trying to adapt an existing file selector to expose a standard programming interface."],["FileChooserDialog","`FileChooserDialog` is a dialog box suitable for use with “File Open” or “File Save” commands. This widget works by putting a `FileChooserWidget` inside a `Dialog`. It exposes the `FileChooser` interface, so you can use all of the `FileChooser` functions on the file chooser dialog as well as those for `Dialog`."],["FileChooserDialogBuilder",""],["FileChooserNative","`FileChooserNative` is an abstraction of a dialog box suitable for use with “File Open” or “File Save as” commands. By default, this just uses a `FileChooserDialog` to implement the actual dialog. However, on certain platforms, such as Windows and macOS, the native platform file chooser is used instead. When the application is running in a sandboxed environment without direct filesystem access (such as Flatpak), `FileChooserNative` may call the proper APIs (portals) to let the user choose a file and make it available to the application."],["FileChooserNativeBuilder",""],["FileChooserWidget","`FileChooserWidget` is a widget for choosing files. It exposes the `FileChooser` interface, and you should use the methods of this interface to interact with the widget."],["FileChooserWidgetBuilder",""],["FileFilter","A `FileFilter` can be used to restrict the files being shown in a `FileChooser`. Files can be filtered based on their name (with `FileFilter::add_pattern`) or on their mime type (with `FileFilter::add_mime_type`)."],["FileFilterBuilder",""],["Filter","A `Filter` object describes the filtering to be performed by a `FilterListModel`."],["FilterListModel","`FilterListModel` is a list model that filters a given other listmodel. It hides some elements from the other model according to criteria given by a `Filter`."],["FilterListModelBuilder",""],["Fixed","The `Fixed` widget is a container which can place child widgets at fixed positions and with fixed sizes, given in pixels. `Fixed` performs no automatic layout management."],["FixedBuilder",""],["FixedLayout","`FixedLayout` is a layout manager which can place child widgets at fixed positions, and with fixed sizes."],["FixedLayoutChild","Implements"],["FixedLayoutChildBuilder",""],["FlattenListModel","`FlattenListModel` is a list model that takes a list model containing list models and flattens it into a single model."],["FlattenListModelBuilder",""],["FlowBox","A `FlowBox` positions child widgets in sequence according to its orientation."],["FlowBoxBuilder",""],["FlowBoxChild","Implements"],["FlowBoxChildBuilder",""],["FontButton","The `FontButton` is a button which displays the currently selected font an allows to open a font chooser dialog to change the font. It is suitable widget for selecting a font in a preference dialog."],["FontButtonBuilder",""],["FontChooser","`FontChooser` is an interface that can be implemented by widgets displaying the list of fonts. In GTK, the main objects that implement this interface are `FontChooserWidget`, `FontChooserDialog` and `FontButton`."],["FontChooserDialog","The `FontChooserDialog` widget is a dialog for selecting a font. It implements the `FontChooser` interface."],["FontChooserDialogBuilder",""],["FontChooserLevel","This enumeration specifies the granularity of font selection that is desired in a font chooser."],["FontChooserWidget","The `FontChooserWidget` widget lists the available fonts, styles and sizes, allowing the user to select a font. It is used in the `FontChooserDialog` widget to provide a dialog box for selecting fonts."],["FontChooserWidgetBuilder",""],["Frame","The frame widget is a widget that surrounds its child with a decorative frame and an optional label. If present, the label is drawn inside the top edge of the frame. The horizontal position of the label can be controlled with `FrameExt::set_label_align`."],["FrameBuilder",""],["GLArea","`GLArea` is a widget that allows drawing with OpenGL."],["GLAreaBuilder",""],["Gesture","`Gesture` is the base object for gesture recognition, although this object is quite generalized to serve as a base for multi-touch gestures, it is suitable to implement single-touch and pointer-based gestures (using the special `None` `gdk::EventSequence` value for these)."],["GestureClick","`GestureClick` is a `Gesture` implementation able to recognize multiple clicks on a nearby zone, which can be listened for through the `GestureClick::pressed` signal. Whenever time or distance between clicks exceed the GTK defaults, `GestureClick::stopped` is emitted, and the click counter is reset."],["GestureClickBuilder",""],["GestureDrag","`GestureDrag` is a `Gesture` implementation that recognizes drag operations. The drag operation itself can be tracked throughout the `GestureDrag::drag-begin`, `GestureDrag::drag-update` and `GestureDrag::drag-end` signals, or the relevant coordinates be extracted through `GestureDragExt::get_offset` and `GestureDragExt::get_start_point`."],["GestureDragBuilder",""],["GestureLongPress","`GestureLongPress` is a `Gesture` implementation able to recognize long presses, triggering the `GestureLongPress::pressed` after the timeout is exceeded."],["GestureLongPressBuilder",""],["GesturePan","`GesturePan` is a `Gesture` implementation able to recognize pan gestures, those are drags that are locked to happen along one axis. The axis that a `GesturePan` handles is defined at construct time, and can be changed through `GesturePan::set_orientation`."],["GesturePanBuilder",""],["GestureRotate","`GestureRotate` is a `Gesture` implementation able to recognize 2-finger rotations, whenever the angle between both handled sequences changes, the `GestureRotate::angle-changed` signal is emitted."],["GestureRotateBuilder",""],["GestureSingle","`GestureSingle` is a subclass of `Gesture`, optimized (although not restricted) for dealing with mouse and single-touch gestures. Under interaction, these gestures stick to the first interacting sequence, which is accessible through `GestureSingleExt::get_current_sequence` while the gesture is being interacted with."],["GestureSingleBuilder",""],["GestureStylus","`GestureStylus` is a `Gesture` implementation specific to stylus input. The provided signals just relay the basic information of the stylus events."],["GestureStylusBuilder",""],["GestureSwipe","`GestureSwipe` is a `Gesture` implementation able to recognize swipes, after a press/move/…/move/release sequence happens, the `GestureSwipe::swipe` signal will be emitted, providing the velocity and directionality of the sequence at the time it was lifted."],["GestureSwipeBuilder",""],["GestureZoom","`GestureZoom` is a `Gesture` implementation able to recognize pinch/zoom gestures, whenever the distance between both tracked sequences changes, the `GestureZoom::scale-changed` signal is emitted to report the scale factor."],["GestureZoomBuilder",""],["Grid","`Grid` is a container which arranges its child widgets in rows and columns, with arbitrary positions and horizontal/vertical spans."],["GridBuilder",""],["GridLayout","`GridLayout` is a layout manager which arranges child widgets in rows and columns, with arbitrary positions and horizontal/vertical spans."],["GridLayoutBuilder",""],["GridLayoutChild","Layout properties for children of `GridLayout`."],["GridLayoutChildBuilder",""],["GridView","`GridView` is a widget to present a view into a large dynamic grid of items."],["GridViewBuilder",""],["HeaderBar","`HeaderBar` is similar to a horizontal `Box`. It allows children to be placed at the start or the end. In addition, it allows the window title to be displayed. The title will be centered with respect to the width of the box, even if the children at either side take up different amounts of space."],["HeaderBarBuilder",""],["IMContext","`IMContext` defines the interface for GTK input methods. An input method is used by GTK text input widgets like `Entry` to map from key events to Unicode character strings."],["IMContextSimple","`IMContextSimple` is a simple input method context supporting table-based input methods. It has a built-in table of compose sequences that is derived from the X11 Compose files."],["IMContextSimpleBuilder",""],["IMMulticontext","Implements"],["IMMulticontextBuilder",""],["IconLookupFlags","Used to specify options for `IconTheme::lookup_icon`"],["IconPaintable","Contains information found when looking up an icon in an icon theme and supports painting it as a `gdk::Paintable`."],["IconPaintableBuilder",""],["IconTheme","`IconTheme` provides a facility for looking up icons by name and size. The main reason for using a name rather than simply providing a filename is to allow different icons to be used depending on what “icon theme” is selected by the user. The operation of icon themes on Linux and Unix follows the Icon Theme Specification There is a fallback icon theme, named `hicolor`, where applications should install their icons, but additional icon themes can be installed as operating system vendors and users choose."],["IconThemeBuilder",""],["IconView","`IconView` provides an alternative view on a `TreeModel`. It displays the model as a grid of icons with labels. Like `TreeView`, it allows to select one or multiple items (depending on the selection mode, see `IconView::set_selection_mode`). In addition to selection with the arrow keys, `IconView` supports rubberband selection, which is controlled by dragging the pointer."],["IconViewBuilder",""],["Image","The `Image` widget displays an image. Various kinds of object can be displayed as an image; most typically, you would load a `gdk::Texture` from a file, and then display that. There’s a convenience function to do this, `Image::new_from_file`, used as follows:"],["ImageBuilder",""],["InfoBar","`InfoBar` is a widget that can be used to show messages to the user without showing a dialog. It is often temporarily shown at the top or bottom of a document. In contrast to `Dialog`, which has an action area at the bottom, `InfoBar` has an action area at the side."],["InfoBarBuilder",""],["InputHints","Describes hints that might be taken into account by input methods or applications. Note that input methods may already tailor their behaviour according to the `InputPurpose` of the entry."],["Label","The `Label` widget displays a small amount of text. As the name implies, most labels are used to label another widget such as a `Button`."],["LabelBuilder",""],["LayoutChild","`LayoutChild` is the base class for objects that are meant to hold layout properties. If a `LayoutManager` has per-child properties, like their packing type, or the horizontal and vertical span, or the icon name, then the layout manager should use a `LayoutChild` implementation to store those properties."],["LayoutManager","Layout managers are delegate classes that handle the preferred size and the allocation of a container widget."],["LevelBar","The `LevelBar` is a bar widget that can be used as a level indicator. Typical use cases are displaying the strength of a password, or showing the charge level of a battery."],["LevelBarBuilder",""],["LinkButton","A `LinkButton` is a `Button` with a hyperlink, similar to the one used by web browsers, which triggers an action when clicked. It is useful to show quick links to resources."],["LinkButtonBuilder",""],["ListBase","`ListBase` is the abstract base class for GTK’s list widgets."],["ListBox","A `ListBox` is a vertical container that contains `ListBoxRow` children. These rows can by dynamically sorted and filtered, and headers can be added dynamically depending on the row content. It also allows keyboard and mouse navigation and selection like a typical list."],["ListBoxBuilder",""],["ListBoxRow","Implements"],["ListBoxRowBuilder",""],["ListItem","`ListItem` is the object that list-handling containers such as `ListView` use to represent items in a `gio::ListModel`. They are managed by the container and cannot be created by application code."],["ListItemBuilder",""],["ListItemFactory","`ListItemFactory` is one of the core concepts of handling list widgets. It is the object tasked with creating widgets for items taken from a `gio::ListModel` when the views need them and updating them as the items displayed by the view change."],["ListStore","The `ListStore` object is a list model for use with a `TreeView` widget. It implements the `TreeModel` interface, and consequentialy, can use all of the methods available there. It also implements the `TreeSortable` interface so it can be sorted by the view. Finally, it also implements the tree [drag and drop][gtk4-`TreeView`-drag-and-drop] interfaces."],["ListView","`ListView` is a widget to present a view into a large dynamic list of items."],["ListViewBuilder",""],["LockButton","`LockButton` is a widget that can be used in control panels or preference dialogs to allow users to obtain and revoke authorizations needed to operate the controls. The required authorization is represented by a `gio::Permission` object. Concrete implementations of `gio::Permission` may use PolicyKit or some other authorization framework. To obtain a PolicyKit-based `gio::Permission`, use `polkit_permission_new`."],["LockButtonBuilder",""],["MapListModel","`MapListModel` is a list model that takes a list model and maps the items in that model to different items according to a `GtkMapListModelMapFunc`."],["MapListModelBuilder",""],["MediaControls","`MediaControls` is a widget to show controls for a `MediaStream` and giving users a way to use it."],["MediaControlsBuilder",""],["MediaFile","`MediaFile` is the implementation for media file usage with `MediaStream`."],["MediaStream","`MediaStream` is the integration point for media playback inside GTK."],["MenuButton","The `MenuButton` widget is used to display a popup when clicked on. This popup can be provided either as a `Popover` or as an abstract `gio::MenuModel`."],["MenuButtonBuilder",""],["MessageDialog","`MessageDialog` presents a dialog with some message text. It’s simply a convenience widget; you could construct the equivalent of `MessageDialog` from `Dialog` without too much effort, but `MessageDialog` saves typing."],["MessageDialogBuilder",""],["MnemonicAction","A `ShortcutAction` that calls `WidgetExt::mnemonic_activate`."],["MountOperation","This should not be accessed directly. Use the accessor functions below."],["MountOperationBuilder",""],["MultiFilter","`MultiFilter` is the base type that implements support for handling multiple filters."],["MultiSelection","`MultiSelection` is an implementation of the `SelectionModel` interface that allows selecting multiple elements."],["MultiSelectionBuilder",""],["MultiSorter","`MultiSorter` combines multiple sorters by trying them in turn. If the first sorter compares two items as equal, the second is tried next, and so on."],["NamedAction","A `ShortcutAction` that activates an action by name."],["NamedActionBuilder",""],["Native","`Native` is the interface implemented by all widgets that can provide a `gdk::Surface` for widgets to render on."],["NativeDialog","Native dialogs are platform dialogs that don’t use `Dialog` or `Window`. They are used in order to integrate better with a platform, by looking the same as other native applications and supporting platform specific features."],["NeverTrigger","A `ShortcutTrigger` that never triggers."],["NoSelection","`NoSelection` is an implementation of the `SelectionModel` interface that does not allow selecting anything."],["NoSelectionBuilder",""],["Notebook","The `Notebook` widget is a layout container whose children are pages that can be switched between using tab labels along one edge."],["NotebookBuilder",""],["NotebookPage","A page in the `Notebook`."],["NotebookPageBuilder",""],["NothingAction","A `ShortcutAction` that does nothing."],["NumericSorter","`NumericSorter` is a `Sorter` that compares numbers."],["NumericSorterBuilder",""],["ObjectExpression",""],["Orientable","The `Orientable` interface is implemented by all widgets that can be oriented horizontally or vertically. `Orientable` is more flexible in that it allows the orientation to be changed at runtime, allowing the widgets to “flip”."],["Overlay","`Overlay` is a container which contains a single main child, on top of which it can place “overlay” widgets. The position of each overlay widget is determined by its `Widget:halign` and `Widget:valign` properties. E.g. a widget with both alignments set to `Align::Start` will be placed at the top left corner of the `Overlay` container, whereas an overlay with halign set to `Align::Center` and valign set to `Align::End` will be placed a the bottom edge of the `Overlay`, horizontally centered. The position can be adjusted by setting the margin properties of the child to non-zero values."],["OverlayBuilder",""],["OverlayLayout","`OverlayLayout` is the layout manager used by `Overlay`. It places widgets as overlays on top of the main child."],["OverlayLayoutChild","Implements"],["OverlayLayoutChildBuilder",""],["PadActionEntry",""],["PadController","`PadController` is an event controller for the pads found in drawing tablets (The collection of buttons and tactile sensors often found around the stylus-sensitive area)."],["PadControllerBuilder",""],["PageRange",""],["PageSetup","A `PageSetup` object stores the page size, orientation and margins. The idea is that you can get one of these from the page setup dialog and then pass it to the `PrintOperation` when printing. The benefit of splitting this out of the `PrintSettings` is that these affect the actual layout of the page, and thus need to be set long before user prints."],["PageSetupUnixDialog",""],["PageSetupUnixDialogBuilder",""],["Paned","`Paned` has two panes, arranged either horizontally or vertically. The division between the two panes is adjustable by the user by dragging a handle."],["PanedBuilder",""],["PaperSize","`PaperSize` handles paper sizes. It uses the standard called PWG 5101.1-2002 PWG: Standard for Media Standardized Names to name the paper sizes (and to get the data for the page sizes). In addition to standard paper sizes, `PaperSize` allows to construct custom paper sizes with arbitrary dimensions."],["PasswordEntry","`PasswordEntry` is entry that has been tailored for entering secrets. It does not show its contents in clear text, does not allow to copy it to the clipboard, and it shows a warning when Caps Lock is engaged. If the underlying platform allows it, `PasswordEntry` will also place the text in a non-pageable memory area, to avoid it being written out to disk by the operating system."],["PasswordEntryBuilder",""],["PickFlags","Flags that influence the behavior of `WidgetExt::pick`"],["Picture","The `Picture` widget displays a `gdk::Paintable`. Many convenience functions are provided to make pictures simple to use. For example, if you want to load an image from a file, and then display that, there’s a convenience function to do this:"],["PictureBuilder",""],["Popover","`Popover` is a bubble-like context window, primarily meant to provide context-dependent information or options. Popovers are attached to a widget, set with `WidgetExt::set_parent`. By default they will point to the whole widget area, although this behavior can be changed through `PopoverExt::set_pointing_to`."],["PopoverBuilder",""],["PopoverMenu","`PopoverMenu` is a subclass of `Popover` that treats its children like menus and allows switching between them. It can open submenus as traditional, nested submenus, or in a more touch-friendly sliding fashion."],["PopoverMenuBar","`PopoverMenuBar` presents a horizontal bar of items that pop up popover menus when clicked."],["PopoverMenuBarBuilder",""],["PopoverMenuBuilder",""],["PopoverMenuFlags","Flags that affect how popover menus are created from a menu model."],["PrintCapabilities",""],["PrintContext","A `PrintContext` encapsulates context information that is required when drawing pages for printing, such as the cairo context and important parameters like page size and resolution. It also lets you easily create `pango::Layout` and `pango::Context` objects that match the font metrics of the cairo surface."],["PrintJob",""],["PrintJobBuilder",""],["PrintOperation","`PrintOperation` is the high-level, portable printing API. It looks a bit different than other GTK dialogs such as the `FileChooser`, since some platforms don’t expose enough infrastructure to implement a good print dialog. On such platforms, `PrintOperation` uses the native print dialog. On platforms which do not provide a native print dialog, GTK uses its own, see `GtkPrintUnixDialog`."],["PrintOperationBuilder",""],["PrintOperationPreview","Implements"],["PrintSettings","A `PrintSettings` object represents the settings of a print dialog in a system-independent way. The main use for this object is that once you’ve printed you can get a settings object that represents the settings the user chose, and the next time you print you can pass that object in so that the user doesn’t have to re-set all his settings."],["PrintUnixDialog",""],["PrintUnixDialogBuilder",""],["Printer",""],["PrinterBuilder",""],["ProgressBar","The `ProgressBar` is typically used to display the progress of a long running operation. It provides a visual clue that processing is underway. The `ProgressBar` can be used in two different modes: percentage mode and activity mode."],["ProgressBarBuilder",""],["PropertyExpression",""],["Range","`Range` is the common base class for widgets which visualize an adjustment, e.g `Scale` or `Scrollbar`."],["RangeBuilder",""],["RecentData",""],["RecentInfo","`RecentInfo` contains private data only, and should be accessed using the provided API."],["RecentManager","`RecentManager` provides a facility for adding, removing and looking up recently used files. Each recently used file is identified by its URI, and has meta-data associated to it, like the names and command lines of the applications that have registered it, the number of time each application has registered the same file, the mime type of the file and whether the file should be displayed only by the applications that have registered it."],["RecentManagerBuilder",""],["Requisition","A `Requisition`-struct represents the desired size of a widget. See [`Widget`’s geometry management section][geometry-management] for more information."],["Revealer","The `Revealer` widget is a container which animates the transition of its child from invisible to visible."],["RevealerBuilder",""],["Root","`Root` is the interface implemented by all widgets that can act as a toplevel widget to a hierarchy of widgets. The root widget takes care of providing the connection to the windowing system and manages layout, drawing and event delivery for its widget hierarchy."],["Scale","A `Scale` is a slider control used to select a numeric value. To use it, you’ll probably want to investigate the methods on its base class, `Range`, in addition to the methods for `Scale` itself. To set the value of a scale, you would normally use `RangeExt::set_value`. To detect changes to the value, you would normally use the `Range::value-changed` signal."],["ScaleBuilder",""],["ScaleButton","`ScaleButton` provides a button which pops up a scale widget. This kind of widget is commonly used for volume controls in multimedia applications, and GTK provides a `VolumeButton` subclass that is tailored for this use case."],["ScaleButtonBuilder",""],["Scrollable","`Scrollable` is an interface that is implemented by widgets with native scrolling ability."],["Scrollbar","The `Scrollbar` widget is a horizontal or vertical scrollbar, depending on the value of the `Orientable:orientation` property."],["ScrollbarBuilder",""],["ScrolledWindow","`ScrolledWindow` is a container that accepts a single child widget, makes that child scrollable using either internally added scrollbars or externally associated adjustments, and optionally draws a frame around the child."],["ScrolledWindowBuilder",""],["SearchBar","`SearchBar` is a container made to have a search entry (possibly with additional connex widgets, such as drop-down menus, or buttons) built-in. The search bar would appear when a search is started through typing on the keyboard, or the application’s search mode is toggled on."],["SearchBarBuilder",""],["SearchEntry","`SearchEntry` is an entry widget that has been tailored for use as a search entry. The main aPI for interacting with a `SearchEntry` as entry is the `Editable` interface."],["SearchEntryBuilder",""],["SelectionFilterModel","`SelectionFilterModel` is a list model that presents the selected items in a `SelectionModel` as its own list model."],["SelectionFilterModelBuilder",""],["SelectionModel","`SelectionModel` is an interface that extends the `gio::ListModel` interface by adding support for selections. This support is then used by widgets using list models to add the ability to select and unselect various items."],["Separator","`Separator` is a horizontal or vertical separator widget, depending on the value of the `Orientable:orientation` property, used to group the widgets within a window. It displays a line with a shadow to make it appear sunken into the interface."],["SeparatorBuilder",""],["Settings","`Settings` provide a mechanism to share global settings between applications."],["SettingsBuilder",""],["Shortcut","`Shortcut` is the low level object used for managing keyboard shortcuts."],["ShortcutAction","`ShortcutAction` is the object used to describe what a `Shortcut` should do when triggered. To activate a `ShortcutAction` manually, `ShortcutActionExt::activate` can be called."],["ShortcutActionFlags","List of flags that can be passed to action activation. More flags may be added in the future."],["ShortcutBuilder",""],["ShortcutController","`ShortcutController` is an event controller that manages shortcuts."],["ShortcutControllerBuilder",""],["ShortcutLabel","`ShortcutLabel` is a widget that represents a single keyboard shortcut or gesture in the user interface."],["ShortcutLabelBuilder",""],["ShortcutManager","The `ShortcutManager` interface is used to implement shortcut scopes."],["ShortcutTrigger","`ShortcutTrigger` is the object used to track if a `Shortcut` should be activated. For this purpose, `ShortcutTrigger::trigger` can be called on a `gdk::Event`."],["ShortcutsGroup","A `ShortcutsGroup` represents a group of related keyboard shortcuts or gestures. The group has a title. It may optionally be associated with a view of the application, which can be used to show only relevant shortcuts depending on the application context."],["ShortcutsGroupBuilder",""],["ShortcutsSection","A `ShortcutsSection` collects all the keyboard shortcuts and gestures for a major application mode. If your application needs multiple sections, you should give each section a unique `ShortcutsSection:section-name` and a `ShortcutsSection:title` that can be shown in the section selector of the `ShortcutsWindow`."],["ShortcutsSectionBuilder",""],["ShortcutsShortcut","A `ShortcutsShortcut` represents a single keyboard shortcut or gesture with a short text. This widget is only meant to be used with `ShortcutsWindow`."],["ShortcutsShortcutBuilder",""],["ShortcutsWindow","A `ShortcutsWindow` shows brief information about the keyboard shortcuts and gestures of an application. The shortcuts can be grouped, and you can have multiple sections in this window, corresponding to the major modes of your application."],["ShortcutsWindowBuilder",""],["SignalAction","A `ShortcutAction` that emits a signal."],["SignalActionBuilder",""],["SignalListItemFactory","`SignalListItemFactory` is a `ListItemFactory` that provides signals that user code can connect to to manage listitems. Signals are emitted for every listitem in the same order:"],["SingleSelection","`SingleSelection` is an implementation of the `SelectionModel` interface that allows selecting a single element. It is the default selection method used by list widgets in GTK."],["SingleSelectionBuilder",""],["SizeGroup","`SizeGroup` provides a mechanism for grouping a number of widgets together so they all request the same amount of space. This is typically useful when you want a column of widgets to have the same size, but you can’t use a `Grid` widget."],["SizeGroupBuilder",""],["SliceListModel","`SliceListModel` is a list model that takes a list model and presents a slice of that model."],["SliceListModelBuilder",""],["Snapshot","`Snapshot` is an auxiliary object that assists in creating `GskRenderNodes` in the `gdk::PaintableInterface.snapshot`() vfunc. It functions in a similar way to a cairo context, and maintains a stack of render nodes and their associated transformations."],["SortListModel","`SortListModel` is a list model that takes a list model and sorts its elements according to a `Sorter`."],["SortListModelBuilder",""],["Sorter","`Sorter` is the way to describe sorting criteria. Its primary user is `SortListModel`."],["SpinButton","A `SpinButton` is an ideal way to allow the user to set the value of some attribute. Rather than having to directly type a number into a `Entry`, `SpinButton` allows the user to click on one of two arrows to increment or decrement the displayed value. A value can still be typed in, with the bonus that it can be checked to ensure it is in a given range."],["SpinButtonBuilder",""],["Spinner","A `Spinner` widget displays an icon-size spinning animation. It is often used as an alternative to a `ProgressBar` for displaying indefinite activity, instead of actual progress."],["SpinnerBuilder",""],["Stack","The `Stack` widget is a container which only shows one of its children at a time. In contrast to `Notebook`, `Stack` does not provide a means for users to change the visible child. Instead, the `StackSwitcher` widget can be used with `Stack` to provide this functionality."],["StackBuilder",""],["StackPage","Implements"],["StackPageBuilder",""],["StackSidebar","A `StackSidebar` enables you to quickly and easily provide a consistent “sidebar” object for your user interface."],["StackSidebarBuilder",""],["StackSwitcher","The `StackSwitcher` widget acts as a controller for a `Stack`; it shows a row of buttons to switch between the various pages of the associated stack widget."],["StackSwitcherBuilder",""],["StateFlags","Describes a widget state. Widget states are used to match the widget against CSS pseudo-classes. Note that GTK extends the regular CSS classes and sometimes uses different names."],["Statusbar","A `Statusbar` is usually placed along the bottom of an application’s main `Window`. It may provide a regular commentary of the application’s status (as is usually the case in a web browser, for example), or may be used to simply output a message when the status changes, (when an upload is complete in an FTP client, for example)."],["StatusbarBuilder",""],["StringFilter","`StringFilter` determines whether to include items by looking at strings and comparing them to a fixed search term. The strings are obtained from the items by evaluating a `Expression`."],["StringFilterBuilder",""],["StringList","`StringList` is a list model that wraps an array of strings."],["StringObject","Implements"],["StringSorter","`StringSorter` is a `Sorter` that compares strings. It does the comparison in a linguistically correct way using the current locale by normalizing Unicode strings and possibly case-folding them before performing the comparison."],["StringSorterBuilder",""],["StyleContext","`StyleContext` is an object that stores styling information affecting a widget."],["StyleContextBuilder",""],["StyleContextPrintFlags","Flags that modify the behavior of `StyleContextExt::to_string`. New values may be added to this enumeration."],["StyleProvider","`StyleProvider` is an interface used to provide style information to a `StyleContext`. See `StyleContextExt::add_provider` and `StyleContext::add_provider_for_display`."],["Switch","`Switch` is a widget that has two states: on or off. The user can control which state should be active by clicking the empty area, or by dragging the handle."],["SwitchBuilder",""],["Text","The `Text` widget is a single line text entry widget."],["TextBuffer","You may wish to begin by reading the [text widget conceptual overview][TextWidget] which gives an overview of all the objects and data types related to the text widget and how they work together."],["TextBufferBuilder",""],["TextBuilder",""],["TextChildAnchor","A `TextChildAnchor` is a spot in the buffer where child widgets can be “anchored” (inserted inline, as if they were characters). The anchor can have multiple widgets anchored, to allow for multiple views."],["TextIter","You may wish to begin by reading the [text widget conceptual overview][TextWidget] which gives an overview of all the objects and data types related to the text widget and how they work together."],["TextMark","You may wish to begin by reading the [text widget conceptual overview][TextWidget] which gives an overview of all the objects and data types related to the text widget and how they work together."],["TextMarkBuilder",""],["TextSearchFlags","Flags affecting how a search is done."],["TextTag","You may wish to begin by reading the [text widget conceptual overview][TextWidget] which gives an overview of all the objects and data types related to the text widget and how they work together."],["TextTagBuilder",""],["TextTagTable","You may wish to begin by reading the [text widget conceptual overview][TextWidget] which gives an overview of all the objects and data types related to the text widget and how they work together."],["TextView","You may wish to begin by reading the [text widget conceptual overview][TextWidget] which gives an overview of all the objects and data types related to the text widget and how they work together."],["TextViewBuilder",""],["TickCallbackId",""],["ToggleButton","A `ToggleButton` is a `Button` which will remain “pressed-in” when clicked. Clicking again will cause the toggle button to return to its normal state."],["ToggleButtonBuilder",""],["Tooltip","Basic tooltips can be realized simply by using `WidgetExt::set_tooltip_text` or `WidgetExt::set_tooltip_markup` without any explicit tooltip object."],["TreeDragDest","Implements"],["TreeDragSource","Implements"],["TreeExpander","`TreeExpander` is a widget that provides an expander for a list."],["TreeExpanderBuilder",""],["TreeIter","The `TreeIter` is the primary structure for accessing a `TreeModel`. Models are expected to put a unique integer in the `stamp` member, and put model-specific data in the three `user_data` members."],["TreeListModel","`TreeListModel` is a `gio::ListModel` implementation that can expand rows by creating new child list models on demand."],["TreeListModelBuilder",""],["TreeListRow","`TreeListRow` is the object used by `TreeListModel` to represent items. It allows navigating the model as a tree and modify the state of rows."],["TreeListRowBuilder",""],["TreeListRowSorter","`TreeListRowSorter` is a special-purpose sorter that will apply a given sorter to the levels in a tree, while respecting the tree structure."],["TreeListRowSorterBuilder",""],["TreeModel","The `TreeModel` interface defines a generic tree interface for use by the `TreeView` widget. It is an abstract interface, and is designed to be usable with any appropriate data structure. The programmer just has to implement this interface on their own data type for it to be viewable by a `TreeView` widget."],["TreeModelFilter","A `TreeModelFilter` is a tree model which wraps another tree model, and can do the following things:"],["TreeModelFilterBuilder",""],["TreeModelFlags","These flags indicate various properties of a `TreeModel`."],["TreeModelSort","The `TreeModelSort` is a model which implements the `TreeSortable` interface. It does not hold any data itself, but rather is created with a child model and proxies its data. It has identical column types to this child model, and the changes in the child are propagated. The primary purpose of this model is to provide a way to sort a different model without modifying it. Note that the sort function used by `TreeModelSort` is not guaranteed to be stable."],["TreeModelSortBuilder",""],["TreePath",""],["TreeRowReference","A `TreeRowReference` tracks model changes so that it always refers to the same row (a `TreePath` refers to a position, not a fixed row). Create a new `TreeRowReference` with `TreeRowReference::new`."],["TreeSelection","The `TreeSelection` object is a helper object to manage the selection for a `TreeView` widget. The `TreeSelection` object is automatically created when a new `TreeView` widget is created, and cannot exist independently of this widget. The primary reason the `TreeSelection` objects exists is for cleanliness of code and API. That is, there is no conceptual reason all these functions could not be methods on the `TreeView` widget instead of a separate function."],["TreeSelectionBuilder",""],["TreeSortable","`TreeSortable` is an interface to be implemented by tree models which support sorting. The `TreeView` uses the methods provided by this interface to sort the model."],["TreeStore","The `TreeStore` object is a list model for use with a `TreeView` widget. It implements the `TreeModel` interface, and consequently, can use all of the methods available there. It also implements the `TreeSortable` interface so it can be sorted by the view. Finally, it also implements the tree [drag and drop][gtk3-`TreeView`-drag-and-drop] interfaces."],["TreeView","Widget that displays any object that implements the `TreeModel` interface."],["TreeViewBuilder",""],["TreeViewColumn","The `TreeViewColumn` object represents a visible column in a `TreeView` widget. It allows to set properties of the column header, and functions as a holding pen for the cell renderers which determine how the data in the column is displayed."],["TreeViewColumnBuilder",""],["Video","`Video` is a widget to show a `MediaStream` with media controls as provided by `MediaControls`. If you just want to display a video without controls, you can treat it like any other paintable and for example put it into a `Picture`."],["VideoBuilder",""],["Viewport","The `Viewport` widget acts as an adaptor class, implementing scrollability for child widgets that lack their own scrolling capabilities. Use `Viewport` to scroll child widgets such as `Grid`, `Box`, and so on."],["ViewportBuilder",""],["VolumeButton","`VolumeButton` is a subclass of `ScaleButton` that has been tailored for use as a volume control widget with suitable icons, tooltips and accessible labels."],["VolumeButtonBuilder",""],["Widget","`Widget` is the base class all widgets in GTK derive from. It manages the widget lifecycle, states and style."],["WidgetPaintable","`WidgetPaintable` is an implementation of the `gdk::Paintable` interface that allows displaying the contents of a `Widget`."],["WidgetPaintableBuilder",""],["Window","A `Window` is a toplevel window which can contain other widgets. Windows normally have decorations that are under the control of the windowing system and allow the user to manipulate the window (resize it, move it, close it,…)."],["WindowBuilder",""],["WindowControls","`WindowControls` shows window frame controls, such as minimize, maximize and close buttons, and the window icon."],["WindowControlsBuilder",""],["WindowGroup","A `WindowGroup` restricts the effect of grabs to windows in the same group, thereby making window groups almost behave like separate applications."],["WindowHandle","`WindowHandle` is a titlebar area widget. When added into a window, it can be dragged to move the window, and handles right click, double click and middle click as expected of a titlebar."],["WindowHandleBuilder",""]],"trait":[["AccessibleExt","Trait containing all `Accessible` methods."],["ActionableExt","Trait containing all `Actionable` methods."],["AdjustmentExt","Trait containing all `Adjustment` methods."],["AppChooserExt","Trait containing all `AppChooser` methods."],["ApplicationWindowExt","Trait containing all `ApplicationWindow` methods."],["BoxExt","Trait containing all `Box` methods."],["BuildableExt","Trait containing all `Buildable` methods."],["BuilderScopeExt","Trait containing all `BuilderScope` methods."],["ButtonExt","Trait containing all `Button` methods."],["CellAreaContextExt","Trait containing all `CellAreaContext` methods."],["CellAreaExt","Trait containing all `CellArea` methods."],["CellEditableExt","Trait containing all `CellEditable` methods."],["CellLayoutExt","Trait containing all `CellLayout` methods."],["CellRendererExt","Trait containing all `CellRenderer` methods."],["CellRendererTextExt","Trait containing all `CellRendererText` methods."],["CheckButtonExt","Trait containing all `CheckButton` methods."],["ColorChooserExt","Trait containing all `ColorChooser` methods."],["ComboBoxExt","Trait containing all `ComboBox` methods."],["ConstraintTargetExt","Trait containing all `ConstraintTarget` methods."],["DialogExt","Trait containing all `Dialog` methods."],["DrawingAreaExt","Trait containing all `DrawingArea` methods."],["EditableExt","Trait containing all `Editable` methods."],["EntryBufferExt","Trait containing all `EntryBuffer` methods."],["EntryExt","Trait containing all `Entry` methods."],["EventControllerExt","Trait containing all `EventController` methods."],["FileChooserExt","Trait containing all `FileChooser` methods."],["FilterExt","Trait containing all `Filter` methods."],["FixedExt","Trait containing all `Fixed` methods."],["FlowBoxChildExt","Trait containing all `FlowBoxChild` methods."],["FontChooserExt","Trait containing all `FontChooser` methods."],["FrameExt","Trait containing all `Frame` methods."],["GLAreaExt","Trait containing all `GLArea` methods."],["GestureDragExt","Trait containing all `GestureDrag` methods."],["GestureExt","Trait containing all `Gesture` methods."],["GestureSingleExt","Trait containing all `GestureSingle` methods."],["GridExt","Trait containing all `Grid` methods."],["GtkApplicationExt","Trait containing all `Application` methods."],["GtkListStoreExt","Trait containing all `ListStore` methods."],["GtkWindowExt","Trait containing all `Window` methods."],["IMContextExt","Trait containing all `IMContext` methods."],["IMMulticontextExt","Trait containing all `IMMulticontext` methods."],["LayoutChildExt","Trait containing all `LayoutChild` methods."],["LayoutManagerExt","Trait containing all `LayoutManager` methods."],["ListBaseExt","Trait containing all `ListBase` methods."],["ListBoxRowExt","Trait containing all `ListBoxRow` methods."],["MediaFileExt","Trait containing all `MediaFile` methods."],["MediaStreamExt","Trait containing all `MediaStream` methods."],["MountOperationExt","Trait containing all `MountOperation` methods."],["MultiFilterExt","Trait containing all `MultiFilter` methods."],["NativeDialogExt","Trait containing all `NativeDialog` methods."],["NativeExt","Trait containing all `Native` methods."],["OrientableExt","Trait containing all `Orientable` methods."],["PopoverExt","Trait containing all `Popover` methods."],["PrintOperationExt","Trait containing all `PrintOperation` methods."],["PrintOperationPreviewExt","Trait containing all `PrintOperationPreview` methods."],["RangeExt","Trait containing all `Range` methods."],["RecentManagerExt","Trait containing all `RecentManager` methods."],["RootExt","Trait containing all `Root` methods."],["ScaleButtonExt","Trait containing all `ScaleButton` methods."],["ScaleExt","Trait containing all `Scale` methods."],["ScrollableExt","Trait containing all `Scrollable` methods."],["SelectionModelExt","Trait containing all `SelectionModel` methods."],["ShortcutActionExt","Trait containing all `ShortcutAction` methods."],["ShortcutManagerExt","Trait containing all `ShortcutManager` methods."],["ShortcutTriggerExt","Trait containing all `ShortcutTrigger` methods."],["SorterExt","Trait containing all `Sorter` methods."],["StyleContextExt","Trait containing all `StyleContext` methods."],["StyleProviderExt","Trait containing all `StyleProvider` methods."],["TextBufferExt","Trait containing all `TextBuffer` methods."],["TextChildAnchorExt","Trait containing all `TextChildAnchor` methods."],["TextMarkExt","Trait containing all `TextMark` methods."],["TextTagExt","Trait containing all `TextTag` methods."],["TextViewExt","Trait containing all `TextView` methods."],["ToggleButtonExt","Trait containing all `ToggleButton` methods."],["TreeDragDestExt","Trait containing all `TreeDragDest` methods."],["TreeDragSourceExt","Trait containing all `TreeDragSource` methods."],["TreeModelExt","Trait containing all `TreeModel` methods."],["TreeModelFilterExt","Trait containing all `TreeModelFilter` methods."],["TreeModelSortExt","Trait containing all `TreeModelSort` methods."],["TreeSortableExt","Trait containing all `TreeSortable` methods."],["TreeStoreExt","Trait containing all `TreeStore` methods."],["TreeViewExt","Trait containing all `TreeView` methods."],["WidgetExt","Trait containing all `Widget` methods."],["WindowGroupExt","Trait containing all `WindowGroup` methods."]],"type":[["Allocation",""]]});